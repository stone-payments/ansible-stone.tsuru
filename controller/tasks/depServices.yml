---
- name: setup container service
  tags: tsuru_container
  include_role:
    name: stone.docker
  vars:
    docker_vg:
      name: "{{ tsuruController_nameVG }}"
      create: false
    docker_pool:
      name: "pool"
      size: "{{ tsuruController_sizePool }}"
      grow: true
      autoextend:
        enabled: false
    docker_data:
      enabled: true
      name: "docker"
      size: "{{ tsuruController_sizeData }}"
    docker_tls:
      enabled: "{{ tsuru_tlsDockerEnabled }}"
      ca: "{{ tsuru_tlsDockerCA }}"
      cert: "{{ tsuru_tlsDockerCert }}"
      key: "{{ tsuru_tlsDockerKey }}"
    docker_config:
      hosts:
        - "unix:///var/run/docker.sock"
        - "tcp://0.0.0.0:{{ tsuru_portDocker}}"
      ipv6: false

- name: setup nosql storage
  tags: tsuru_nosql
  include_role:
    name: stone.mongodb
  vars:
    mongodb_conf_bindIp: "0.0.0.0"
    mongodb_conf_port: "{{ tsuru_portNoSQL }}"
    mongodb_conf_auth: true
    mongodb_conf_key: "{{ tsuru_replKey }}"
    mongodb_replSet_enabled: true
    mongodb_replSet_name: "{{ tsuru_nameRs }}"
    mongodb_replSet_master: "{{ tsuru_addrMaster }}"
    mongodb_replSet_isMaster: "{{ true if tsuru_addrMaster in ansible_all_ipv4_addresses or tsuru_addrMaster == inventory_hostname else false }}"
    mongodb_admin_password: "{{ tsuru_passAdmin }}"

- name: setup inmemory storage
  tags: tsuru_inmem
  include_role:
    name: stone.redis
  vars:
    redis_srv_conn_bind: "0.0.0.0"
    redis_srv_conn_port: "{{ tsuru_portInMem }}"
    redis_srv_sec_password: "{{ tsuru_passAdmin }}"
    redis_srv_repl_isMaster: "{{ true if tsuru_addrMaster in ansible_all_ipv4_addresses or tsuru_addrMaster == inventory_hostname else false }}"
    redis_srv_repl_masterAddr: "{{ lookup('dig', tsuru_addrMaster) }} {{ tsuru_portInMem }}"
    redis_sent_enabled: true
    redis_sent_monitors:
      - name: "{{ tsuru_nameMaster }}"
        host: "{{ tsuru_addrMaster }}"
        port: "{{ tsuru_portInMem }}"
        quorum: 2
        auth_pass: "{{ tsuru_passAdmin }}"
        down_after_milliseconds: 3000

- name: setup search storage
  tags: tsuru_search
  include_role:
    name: stone.elasticsearch
  vars:
    es_instance_name: "{{ ansible_hostname }}"
    es_config:
        cluster.name: "{{ tsuru_nameRs }}"
        discovery.zen.ping.unicast.hosts: "{{ tsuru_addrMaster }} {{ tsuru_portSearchTransport }}"
        network.host: "0.0.0.0"
        http.port: "{{ tsuru_portSearch }}"
        transport.tcp.port: "{{ tsuru_portSearchTransport }}"
        node.data: true
        node.master: "{{ true if tsuru_addrMaster in ansible_all_ipv4_addresses or tsuru_addrMaster == inventory_hostname else false }}"
        bootstrap.memory_lock: false
    es_heap_size: "1g"
    es_scripts: false
    es_templates: false
    es_version_lock: false
    es_plugins:
     - plugin: ingest-geoip

- name: setup monitoring service
  tags: tsuru_monit
  include_role:
    name: stone.consul
  vars:
    consul_node_role: "{{ 'bootstrap' if tsuru_addrMaster in ansible_all_ipv4_addresses or tsuru_addrMaster == inventory_hostname else 'server' }}"
    consul_datacenter: "{{ tsuru_dcName }}"
    consul_group_name: "{{ tsuru_groupController }}"
    consul_config_custom:
      services:
        - name: "mongodb"
          port: "{{ tsuru_portNoSQL }}"
          checks:
            - id: "mongodbTcpOpen"
              name: "MongoDB TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portNoSQL }}"
              interval: "10s"
        - name: "redis"
          port: "{{ tsuru_portInMem }}"
          checks:
            - id: "redisTcpOpen"
              name: "Redis TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portInMem }}"
              interval: "10s"
        - name: "sentinel"
          port: "{{ tsuru_portSentinel }}"
          checks:
            - id: "sentinelTcpOpen"
              name: "Sentinel TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portSentinel }}"
              interval: "10s"
        - name: "elasticsearch"
          port: "{{ tsuru_portSearch }}"
          checks:
            - id: "elasticsearchApiTcpOpen"
              name: "ElasticSearch API TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portSearch }}"
              interval: "10s"
            - id: "elasticsearchTransportTcpOpen"
              name: "ElasticSearch Transport TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portSearchTransport }}"
              interval: "10s"
            - id: "elasticsearchClusterHealth"
              name: "ElasticSearch cluster health"
              http: "http://127.0.0.1:{{ tsuru_portSearch }}/_cluster/health"
              interval: "10s"
        - name: "docker"
          port: "{{ tsuru_portDocker }}"
          checks:
            - id: "dockerApiTcpOpen"
              name: "Docker API TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portDocker }}"
              interval: "10s"
        - name: "api"
          port: "{{ tsuru_portAPI }}"
          checks:
            - id: "tsuruApiTcpOpen"
              name: "Tsuru API TCP port open"
              tcp: "127.0.0.1:{{ tsuru_portAPI }}"
              interval: "10s"
            - id: "tsuruApiHttpOk"
              http: "http://127.0.0.1:{{ tsuru_portAPI }}/healthcheck"
              interval: "10s"

- name: setup alerting service
  tags: tsuru_alert
  include_role:
    name: stone.consul-alerts
  vars:
    consulAlerts_dc: "{{ tsuru_dcName }}"
